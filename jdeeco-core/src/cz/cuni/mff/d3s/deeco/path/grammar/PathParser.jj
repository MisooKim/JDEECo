 /* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

options {
  STATIC = false;
}

PARSER_BEGIN(PathParser)
package cz.cuni.mff.d3s.deeco.path.grammar;
import cz.cuni.mff.d3s.deeco.runtime.model.KnowledgePath;
import cz.cuni.mff.d3s.deeco.runtime.model.PathNodeMapKey;
import cz.cuni.mff.d3s.deeco.runtime.model.PathNodeField;
import java.io.ByteArrayInputStream;

/** Simple brace matcher. */
public class PathParser
{
  /** Main entry point. */
  public static KnowledgePath parse(String expression) throws ParseException
  {
    PathParser parser = new PathParser(new ByteArrayInputStream(expression.getBytes()));
    return parser.parseExpression();
  }
}

PARSER_END(PathParser)

TOKEN :
{
  < IDENTIFIER :
    (
      < LETTER >
    | < DIGIT >
    )+ >
| < #LETTER : [ "_", "-", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < SEPARATOR : [ "." ] >
| < OPEN : [ "[" ] >
| < CLOSE : [ "]" ] >
}

KnowledgePath parseExpression() :
{
  Token t;
  // Values needed to create a PathNode
  KnowledgePath value = new KnowledgePath();
  
}
{
  (
    (t = < IDENTIFIER >
    {
      value.addNode(new PathNodeField(t.image));
    }
    )
  |
    (
      (
        < OPEN >
        {
          value.addNode(new PathNodeMapKey(parseExpression()));
        }
      )
      < CLOSE >
    )
  )
  (
    < SEPARATOR >
    {
      value.join(parseExpression());
    }
  )*
  {
    return value;
  }
}
