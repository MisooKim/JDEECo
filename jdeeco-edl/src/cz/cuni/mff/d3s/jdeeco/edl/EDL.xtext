grammar cz.cuni.mff.d3s.jdeeco.edl.EDL with org.eclipse.xtext.common.Terminals

import "platform:/resource/cz.cuni.mff.d3s.jdeeco.edl.model/model/edl.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// ===== Document sections and building blocks =====
EdlDocument returns EdlDocument:
	{EdlDocument}
	"package" package = QualifiedName	
		(ensembles+=EnsembleDefinition | dataContracts+=DataContractDefinition | knowledgeTypes+=KnowledgeTypeDefinition)*
	;

EnsembleDefinition returns EnsembleDefinition:
	'ensemble'
	    name=ID
	    'id' id=IdDefinition
	    ('scheduling' 
	    	('offset' schedulingOffset = EInt)?
	    	('period' schedulingPeriod = EInt)
	    )?	   
		//('child of' parentEnsemble=EString)?
		//('parent of' childEnsembles+=ChildDefinition (childEnsembles+=ChildDefinition)*)?
		('alias' aliases+=AliasDefinition (aliases+=AliasDefinition)*)?
		'membership'
		  'roles' roles+=RoleDefinition (roles+=RoleDefinition)*		
		  ('constraints' constraints+=ConstraintDeclaration (constraints+=ConstraintDeclaration)*)?
		  ('fitness' fitness=OrdinalQuery)?
		('knowledge exchange' ((externalKnowledgeExchange?='external') | (exchangeRules+=ExchangeRule (exchangeRules+=ExchangeRule)*)))?
	 'end'	
;

DataContractDefinition returns DataContractDefinition:
	'data contract'
		name=ID
		(fields+=FieldDeclaration)*		
	'end'
;

KnowledgeTypeDefinition returns TypeDefinition:
	'knowledge type'
		name=ID
		(fields+=FieldDeclaration)*
	'end'
;	

FieldDeclaration returns FieldDeclaration:
	name=ID ":" type=TypeName
;


ChildDefinition returns ChildDefinition:
	name = ID ('[' cardinalityMin=EInt '..' cardinalityMax=Cardinality ']')? ':' type = QualifiedName	
;

RoleDefinition returns RoleDefinition:
	//(exclusive?='exclusive')?
	name = ID ('[' cardinalityMin=EInt '..' cardinalityMax=Cardinality ']')? ':' type = QualifiedName
	('where' whereFilter = Constraint)?	
;

Cardinality returns ecore::EInt:
    EInt | "*"
;

AliasDefinition returns AliasDefinition:
	aliasId = ID '=' aliasValue = Query	
;

IdDefinition returns IdDefinition:
	fieldName=EString ':' type = TypeName  (isAssigned?= ':=' value = Query)?
;

ExchangeRule returns ExchangeRule:
	field = QualifiedName ':=' query = Query
;

QualifiedName returns QualifiedName:
	{QualifiedName}
	(prefix+=ID '.' (prefix+=ID '.')*)?	
	name=ID
;

FieldName returns QualifiedName:
	QualifiedName
	| name = 'it'
	| prefix+='it' '.' (prefix+=ID '.')* name=ID
;

TypeName returns QualifiedName:
	name = ("int" | "double" | "string" | "bool") | QualifiedName
;


// ===== Core types (terminals) =====

EInt returns ecore::EInt:
	INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;

EDouble returns ecore::EDouble:
	INT? '.' INT (('E'|'e') '-'? INT)?;


// ===== Atomic literals =====

FunctionCall returns FunctionCall:
	{FunctionCall}
	name = ID'(' parameters += Query (',' parameters += (Query))* ')'
;

KnowledgeVariable returns KnowledgeVariable:
	path=FieldName
;	

NumericLiteral returns NumericLiteral:
	value=EInt
;

BoolLiteral returns BoolLiteral:
	value = EBoolean
;

enum AdditiveOperatorType returns BinaryOperatorType:
				Addition = '+' | Subtraction = '-';

enum MultiplicativeOperatorType returns BinaryOperatorType:
				Multiplication = '*' | Division = '/';


StringLiteral returns StringLiteral:
	value=STRING
;

FloatLiteral returns FloatLiteral:
	value=EDouble
;

// ===== Constraints =====

ConstraintDeclaration returns EquitableQuery:
	'constraint ' Constraint
;

Constraint returns EquitableQuery:
	RelationOperator
	(({LogicalOperator.left = current}
		type=BoolOperatorType)
	right=RelationOperator)*
;

RelationOperator returns EquitableQuery:		
	OrdinalQuery	
	({RelationOperator.left = current} type = RelationOperatorType
	right=OrdinalQuery)?
;

enum BoolOperatorType returns BoolOperatorType:
	And = '&&' | Or = '||';
	
enum RelationOperatorType returns RelationOperatorType:
	Equality = '==' | NonEquality = '!=' | GreaterThan = '>' | LessThan = '<' | GreaterOrEqual = '>=' | LessOrEqual = '<='
;




// ===== Ordinal query (Fitness function, constraints) =====

OrdinalQuery returns EquitableQuery:
	Aggregation	
;

Aggregation returns EquitableQuery:
	Sum | AdditiveQuery
;

Sum returns Sum:	
	'sum' collection = QualifiedName item = OrdinalQuery 
;

AdditiveQuery returns EquitableQuery:
	MultiplicativeOrdinalQuery
	(({AdditiveOperator.left=current}
	operatorType = AdditiveOperatorType)
	right=MultiplicativeOrdinalQuery)*
;

MultiplicativeOrdinalQuery returns EquitableQuery:		
	AdditiveInverseOrdinalQuery
	(({MultiplicativeOperator.left=current}
	operatorType = MultiplicativeOperatorType)
	right=AdditiveInverseOrdinalQuery)*
;

AdditiveInverseOrdinalQuery returns EquitableQuery:
	InverseOrdinal | BaseOrdinalQuery
;

InverseOrdinal returns EquitableQuery:
	'-' {AdditiveInverse} nested=BaseOrdinalQuery | '!' {Negation} nested=BaseOrdinalQuery;


BaseOrdinalQuery returns EquitableQuery:
	BoolLiteral | NumericLiteral | OrdinalFunctionCall | KnowledgeVariable | '(' Constraint ')'
;

OrdinalFunctionCall returns FunctionCall:
	{FunctionCall}
	name = ID '(' parameters += Constraint (',' parameters += (Constraint))* ')'
;

// ===== General query (knowledge exchange, aliasing) =====

Query returns EquitableQuery:	
	RelationOperatorQuery
	(({LogicalOperator.left = current}
		type=BoolOperatorType)
	right=RelationOperatorQuery)*
;

RelationOperatorQuery returns EquitableQuery:		
	ArithmeticQuery	
	({RelationOperator.left = current} type = RelationOperatorType
	right=ArithmeticQuery)?
;

ArithmeticQuery returns EquitableQuery:
	MultiplicativeQuery
	(({AdditiveOperator.left=current}
	operatorType = AdditiveOperatorType)
	right=MultiplicativeQuery)*
;

MultiplicativeQuery returns EquitableQuery:		
	InverseQuery
	(({MultiplicativeOperator.left=current}
	operatorType = MultiplicativeOperatorType)
	right=InverseQuery)*
;

InverseQuery returns EquitableQuery:
	Inverse | BaseQuery
;

Inverse returns EquitableQuery:
	'-' {AdditiveInverse} nested=BaseOrdinalQuery | '!' {Negation} nested=BaseOrdinalQuery; 

BaseQuery returns EquitableQuery:
	StringLiteral | BoolLiteral | FloatLiteral | NumericLiteral | FunctionCall | KnowledgeVariable | '('Query')'
;