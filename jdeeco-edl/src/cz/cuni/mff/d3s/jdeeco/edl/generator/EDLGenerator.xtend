/*
 * generated by Xtext
 */
package cz.cuni.mff.d3s.jdeeco.edl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import cz.cuni.mff.d3s.jdeeco.edl.model.edl.*
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class EDLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var document = resource.contents.filter(typeof(EdlDocument)).findFirst[true];
		var allParts = new ArrayList<String>(document.package.prefix);
		allParts.add(document.package.name);			
		
		var packageString = String.join(".", allParts);
		var path = String.join("/", allParts) + "/";		
		
		for(EnsembleDefinition e : document.ensembles) {
			generateEnsemble(e, fsa, path, packageString);			
		}
		
		for(DataContractDefinition d : document.dataContracts) {
			generateDataContract(d, fsa, path, packageString)
		}		
	}
	
	def void generateEnsemble(EnsembleDefinition e, IFileSystemAccess fsa, String path, String packageString) {
		fsa.generateFile(path+e.name + ".java", 
			
'''package «packageString»;

import java.util.ArrayList;
import java.util.List;
import cz.cuni.mff.d3s.deeco.ensembles.EnsembleInstance;

public class «e.name» implements EnsembleInstance {
	public «getJavaTypeName(e.id.type.name)» «e.id.fieldName»;
	
	public «e.name»(«getJavaTypeName(e.id.type.name)» «e.id.fieldName») {
		this.«e.id.fieldName» = «e.id.fieldName»;
		«FOR r : e.roles»
		«IF r.cardinalityMax != 1»		
		«r.name» = new ArrayList<>();
		«ENDIF»		
		«ENDFOR»
	}  
			
	«FOR r : e.roles»
	«IF r.cardinalityMax == 1»
	public «r.type.name» «r.name»;
	«ELSE»
	public List<«r.type.name»> «r.name»;
	«ENDIF»
	«ENDFOR»

	@Override
	public void performKnowledgeExchange() {
		// TODO Knowledge exchange
	}		
}'''
			);
	}
	
	def void generateDataContract(DataContractDefinition d, IFileSystemAccess fsa, String path, String packageString) {
		fsa.generateFile(path+d.name + ".java", 
			
'''package «packageString»;

public class «d.name» {	
	«FOR f : d.fields»				
	public «getJavaTypeName(f.type.name)» «f.name»;				
	«ENDFOR»				
}'''
			);
	}
	
	def String getJavaTypeName(String type) {
		if (type.equals("string"))
			"String"
		else
			type
	}
	
}
